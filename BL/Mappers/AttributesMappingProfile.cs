using AutoMapper;
using ZelnyTrh.EF.BL.DTOs.AttributesDto;
using ZelnyTrh.EF.DAL.Entities;
namespace ZelnyTrh.EF.BL.Mappers;
public class AttributeMappingProfile : Profile
{
    public AttributeMappingProfile()
    {
        // Entity -> Read DTOs (Get operations)
        CreateMap<AttributeDefinition, AttributeDefinitionReadDto>()
            // Explicitly map scalar properties
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
            .ForMember(dest => dest.DataType, opt => opt.MapFrom(src => src.DataType))
            .ForMember(dest => dest.IsRequired, opt => opt.MapFrom(src => src.IsRequired))
            .ForMember(dest => dest.ValidationRule, opt => opt.MapFrom(src => src.ValidationRule))
            .ForMember(dest => dest.Unit, opt => opt.MapFrom(src => src.Unit))
            // Map foreign key
            .ForMember(dest => dest.CategoryId, opt => opt.MapFrom(src => src.CategoryId))
            // Map data from navigation property
            .ForMember(dest => dest.CategoryName,
                opt => opt.MapFrom(src => src.Category != null ? src.Category.Name : null));

        // Entity -> Create/Update DTOs (Post/Put operations)
        CreateMap<AttributeDefinitionCreateDto, AttributeDefinition>()
            // Map scalar properties
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
            .ForMember(dest => dest.DataType, opt => opt.MapFrom(src => src.DataType))
            .ForMember(dest => dest.IsRequired, opt => opt.MapFrom(src => src.IsRequired))
            .ForMember(dest => dest.ValidationRule, opt => opt.MapFrom(src => src.ValidationRule))
            .ForMember(dest => dest.Unit, opt => opt.MapFrom(src => src.Unit))
            // Map foreign key
            .ForMember(dest => dest.CategoryId, opt => opt.MapFrom(src => src.CategoryId))
            // Handle auto-generated/navigation properties
            .ForMember(dest => dest.Id,
                opt => opt.MapFrom(src => Guid.NewGuid().ToString()))
            .ForMember(dest => dest.Category, opt => opt.Ignore())
            .ForMember(dest => dest.CropAttributes, opt => opt.Ignore());

        // CropAttributes mappings
        CreateMap<CropAttributes, CropAttributeReadDto>()
            // Map scalar properties
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
            .ForMember(dest => dest.Value, opt => opt.MapFrom(src => src.Value))
            // Map foreign keys
            .ForMember(dest => dest.CropId, opt => opt.MapFrom(src => src.CropId))
            .ForMember(dest => dest.AttributeDefinitionId,
                opt => opt.MapFrom(src => src.AttributeDefinitionId))
            // Map required data from navigation properties
            .ForMember(dest => dest.AttributeName,
                opt => opt.MapFrom(src => src.AttributeDefinition.Name))
            .ForMember(dest => dest.CropName,
                opt => opt.MapFrom(src => src.Crop.Name));

        CreateMap<CropAttributeCreateDto, CropAttributes>()
            // Map scalar properties
            .ForMember(dest => dest.Value, opt => opt.MapFrom(src => src.Value))
            // Map foreign keys
            .ForMember(dest => dest.CropId, opt => opt.MapFrom(src => src.CropId))
            .ForMember(dest => dest.AttributeDefinitionId,
                opt => opt.MapFrom(src => src.AttributeDefinitionId))
            // Handle auto-generated/navigation properties
            .ForMember(dest => dest.Id, opt => opt.Ignore()) // Generated by service
            .ForMember(dest => dest.Crop, opt => opt.Ignore())
            .ForMember(dest => dest.AttributeDefinition, opt => opt.Ignore());

        CreateMap<CropAttributeUpdateDto, CropAttributes>()
            // Only allow updating the value
            .ForMember(dest => dest.Value, opt => opt.MapFrom(src => src.Value))
            // Protect other properties
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CropId, opt => opt.Ignore())
            .ForMember(dest => dest.AttributeDefinitionId, opt => opt.Ignore())
            .ForMember(dest => dest.Crop, opt => opt.Ignore())
            .ForMember(dest => dest.AttributeDefinition, opt => opt.Ignore());
    }
}